PROJECT(CMakes)
# REQUIRE
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)

# some useful variables  http://www.cmake.org/Wiki/CMake_Useful_Variables

#SET(CMAKE_INSTALL_PREFIX $ENV{HOME}/.local/)
SET(GLO_VERSION_MAJOR 1)
SET(GLO_VERSION_MINOR 0.1)

SET(VERSION 0.1)
SET(CMAKE_INCLUDE_DIRECTORIES_BEFORE on)
SET(CMAKE_INCLUDE_CURRENT_DIR on)
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH on)

SET(CMAKE_MACOSX_RPATH 1)
MESSAGE(STATUS "CMAKE_INSTALL_PREFIX " ${CMAKE_INSTALL_PREFIX})
MESSAGE(STATUS "CMAKE_MACOSX_RPATH " ${CMAKE_MACOSX_RPATH})

MESSAGE(STATUS "BINARY_DIR " ${PROJECT_BINARY_DIR})
MESSAGE(STATUS "SOURCE_DIR " ${PROJECT_SOURCE_DIR})

# REQUIREMENT CHECKER 
# FIND_PACKAGE(PkgConfig)
# PKG_CHECK_MODULES(GLIB2 REQUIRED glib-2.0>=2.10)
# PKG_CHECK_MODULES(LIBEVENT REQUIRED libevent)
#set(Boost_USE_STATIC_LIBS        ON)
#set(Boost_USE_MULTITHREADED      ON)
#set(Boost_USE_STATIC_RUNTIME    OFF)
#find_package(Boost COMPONENTS thread filesystem system program_options REQUIRED)



# general flags 
# SET(CMAKE_C_FLAGS "$ENV{CFLAGS}  -Wall -g -ggdb --std=c99 -v")
SET(CMAKE_C_FLAGS "$ENV{CFLAGS}  -Wall -g -ggdb --std=c99")
#SET(CMAKE_CXX_FLAGS " $ENV{CXXFLAGS}  -Wall -g -ggdb --std=c++11")
SET(CMAKE_CXX_FLAGS " $ENV{CXXFLAGS}  -Wall -g -ggdb --std=c++11 -Wno-deprecated")
# debug cmake  -DCMAKE_BUILD_TYPE=debug ..
SET(CMAKE_C_FLAGS_DEBUG "$ENV{CFLAGS}  -Wall -g -ggdb --std=c99")
SET(CMAKE_CXX_FLAGS_DEBUG " $ENV{CXXFLAGS}  -Wall -g -ggdb --std=c++11")
# release cmake  -DCMAKE_BUILD_TYPE=release ..
SET(CMAKE_C_FLAGS_RELEASE " $ENV{CFLAGS}  -Wall  -O3 --std=c99")
SET(CMAKE_CXX_FLAGS_RELEASE " $ENV{CXXFLAGS} -Wall -O3 --std=c++11")

SET (RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")



# there may no need to link system library && system include

# INCLUDE DIRECTORIES
INCLUDE_DIRECTORIES(
	${PROJECT_SOURCE_DIR}/include
	${PROJECT_BINARY_DIR}/include
)


# LINK DIRECTORIES
LINK_DIRECTORIES(
	${PROJECT_BINARY_DIR}/lib
)

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)


SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

SET(OPTIONS_USE_EXTERNAL_CRFPP YES)
SET(OPTIONS_USE_EXTERNAL_LEVELDB YES)
SET(OPTIONS_USE_EXTERNAL_MONGO_CXX YES)

#INCLUDE(EXTERNALPROJECT) # IF NEED EXTEND PROJECT
INCLUDE(ExternalProject) # IF NEED EXTEND PROJECT

IF(OPTIONS_USE_EXTERNAL_CRFPP)
	INCLUDE(ExternalCrfpp)
ENDIF(OPTIONS_USE_EXTERNAL_CRFPP)

IF(OPTIONS_USE_EXTERNAL_LEVELDB)
	INCLUDE(ExternalLeveldb)
ENDIF(OPTIONS_USE_EXTERNAL_LEVELDB)

IF(OPTIONS_USE_EXTERNAL_MONGO_CXX)
	INCLUDE(ExternalMongoCXX)
ENDIF(OPTIONS_USE_EXTERNAL_MONGO_CXX)




ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(lib)
ADD_SUBDIRECTORY(src)

SET(RESOURCE_DIR ${PROJECT_SOURCE_DIR}/res)
# CONFIGURE_FILE(${RSOURCE_DIR}/config.ini ${PROJECT_BINARY_DIR}/config.ini )
# CONFIGURE_FILE(${RSOURCE_DIR}/stopwords.txt ${PROJECT_BINARY_DIR}/stopwords.txt )
#CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/run.sh ${PROJECT_BINARY_DIR}/run.sh )
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/config.h.in ${PROJECT_BINARY_DIR}/include/conf/config.h )
CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/config.ini ${PROJECT_BINARY_DIR}/config.ini )

#EXEC_PROGRAM("cp -r ${PROJECT_SOURCE_DIR}/res/dict.db ${PROJECT_BINARY_DIR}")
# FILE  COPY : http://www.cmake.org/cmake/help/v2.8.10/cmake.html#command%3afile
# OLD VERSION , FILE COPY CAN SEE: http://stackoverflow.com/questions/697560/how-to-copy-directory-from-source-tree-to-binary-tree
FILE(COPY ${PROJECT_SOURCE_DIR}/res/dict.db DESTINATION ${PROJECT_BINARY_DIR})

#ADD_TEST(evolution ${EXECUTABLE_OUTPUT_PATH}/percimpl evo )
ENABLE_TESTING()



